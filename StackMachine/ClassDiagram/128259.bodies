class CPU
!!!128003.java!!!	run() : void
		try
		{
			int opCode;
			while (true)
			{
				
				opCode = programMemory.read(programCounter);
				programCounter++;				
				
				ioSystem.displayRuntimeError("@" + (programCounter-1) + ": ");
				
				switch (opCode)
				{
					case HALT:
					{
						System.err.println("HALT");
						this.ioSystem.displayProgramTermination();
						return;
					}
					case PUSH:
					{
						expStack.push(programMemory.read(programCounter));
						programCounter++;
						break;
					}
					case ADD:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(a+b);
						break;
					}
					case SUB:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(a-b);
						break;
					}
					case MUL:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(a*b);
						break;
					}
					case DIV:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(a/b);
						break;
					}
					case MOD:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(a%b);
						break;
					}
					case NEG:
					{
						int a = expStack.plop();
						expStack.push(-a);
						break;
					}
					case LT:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(b < a ? 0 : 1);
						break;
					}
					case LE:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(b <= a ? 0 : 1);
						break;
					}
					case GT:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(b > a ? 0 : 1);
						break;
					}
					case GE:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(b >= a ? 0 : 1);
						break;
					}
					case EQ:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(b == a ? 0 : 1);
						break;
					}
					case NE:
					{
						int a = expStack.plop();
						int b = expStack.plop();
						expStack.push(b != a ? 0 : 1);
						break;
					}
					case IN:
					{
						int a = ioSystem.read();
						expStack.push(a);
						break;
					}
					case OUT:
					{
						ioSystem.write(expStack.plop());
						break;
					}
					case CALL:
					{
						callStack.push(programCounter);
						break;
					}
					case RET:
					{
						programCounter = callStack.plop();
						break;
					}
					case JP:
					{
						programCounter = programMemory.read(programCounter);
						break;
					}
					case JZ:
					{
						int a = expStack.plop();
						if(a == 0)
							programCounter = a;
						break;
					}
					case DUP:
					{
						expStack.dup();
						break;
					}
					case POP:
					{
						expStack.plop();
						break;
					}
					default:
					{
						ioSystem.displayRuntimeError("Bad instruction");
						return;
					}
				}
			}
		}
		catch (AddressOutOfBoundsException e)
		{
			ioSystem.displayRuntimeError("Adress out of bounds.");
		}
		catch (IOException e)
		{
			ioSystem.displayRuntimeError("Error with IO system.");
		}
		catch (StackOverflowException e)
		{
			ioSystem.displayRuntimeError("Stack overflow.");
		}
		catch (StackUnderflowException e)
		{
			ioSystem.displayRuntimeError("Stack underflow.");
		}		
!!!128131.java!!!	wireToProgramMemory(inout programMemory : Memory) : void
		this.programMemory = programMemory;
		
!!!128259.java!!!	wireToExpStack(inout expStack : Stack) : void
		// TODO Auto-generated method stub
		
!!!128387.java!!!	wireToCallStack(inout callStack : Stack) : void
		// TODO Auto-generated method stub
		
!!!128515.java!!!	wireToIoSubsystem(inout ioSystem : IO) : void
		this.ioSystem = ioSystem;
		// TODO Auto-generated method stub
		
!!!128643.java!!!	clearStacks() : void
		// TODO Auto-generated method stub
		
!!!128771.java!!!	setPC(in address : int) : void
		// TODO Auto-generated method stub
		
